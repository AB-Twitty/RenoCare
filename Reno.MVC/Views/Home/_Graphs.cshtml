@using Reno.MVC.Services.Base;
@model DashboardModel

@{
    var month_labels = Json.Serialize(Model.Last7Months);

    var reports_data = Json.Serialize(Model.ReportsLast7Months);


    var medReq_labels = Json.Serialize(Model.MedReq.Keys);
    var medReq_data = Json.Serialize(Model.MedReq.Values.Select(x => x.First));
    var medReq_colors = Json.Serialize(Model.MedReq.Values.Select(x => x.Second));
}


<style>
    .t-margin {
        margin: 0;
        margin-top: 20px;
    }
</style>

<div class="row t-margin">
    <div class="col-lg-6">
        <div class="ibox shadow">
            <div class="ibox-title">
                <h5>
                    Reports Over Months
                </h5>
            </div>
            <div class="ibox-content">
                <div>
                    <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                    <canvas id="report-lineChart" height="331" style="display: block; height: 265px; width: 568px;" width="710" class="chartjs-render-monitor"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="ibox shadow">
            <div class="ibox-title">
                <h5>Medication Requests
                    <small>(@DateTime.Now.Year)</small>
                </h5>
            </div>
            <div class="ibox-content">
                <div>
                    <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                    <canvas id="medReq-pieChart" height="331" style="display: block; height: 265px; width: 568px;" width="710" class="chartjs-render-monitor"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row t-margin">
    <div class="col-lg-6">
        <div class="ibox shadow">
            <div class="ibox-title">
                <h5>
                    Patient VS Gender
                </h5>
            </div>
            <div class="ibox-content">
                <div>
                    <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                    <canvas id="gender-pieChart" height="331" style="display: block; height: 265px; width: 568px;" width="710" class="chartjs-render-monitor"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-6">
        <div class="ibox shadow">
            <div class="ibox-title">
                <h5>
                    Patients Age Distribution
                </h5>
            </div>
            <div class="ibox-content">
                <div>
                    <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                    <canvas id="age-binChart" height="331" style="display: block; height: 265px; width: 568px;" width="710" class="chartjs-render-monitor"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@if (User.IsInRole("Admin"))
{
    <div class="row t-margin">
        <div class="col-lg-6">
            <div class="ibox shadow">
                <div class="ibox-title">
                    <h5>
                        Dialysis Units Supporting Treatment
                    </h5>
                </div>
                <div class="ibox-content">
                    <div>
                        <div class="chartjs-size-monitor"><div class="chartjs-size-monitor-expand"><div class=""></div></div><div class="chartjs-size-monitor-shrink"><div class=""></div></div></div>
                        <canvas id="treatment-barChart" height="331" style="display: block; height: 265px; width: 568px;" width="710" class="chartjs-render-monitor"></canvas>
                    </div>
                </div>
            </div>
        </div>

    </div>


    <div class="row t-margin">
        <div class="col-lg-12">
            <div class="ibox shadow">
                <div class="ibox-title">
                    <h5>
                        Map
                    </h5>
                </div>
                <div class="ibox-content">
                    <div id="world-map" style="height: 300px;"></div>
                </div>
            </div>
        </div>
    </div>

} 


<script src="~/js/plugins/charts/chart.min.js"></script>
<script src="~/js/plugins/jvectormap/jquery-jvectormap-2.0.2.min.js"></script>
<script src="~/js/plugins/jvectormap/jquery-jvectormap-world-mill-en.js"></script>

<script>
    $(function () {
        var month_labels = @Html.Raw(month_labels);


        var report_lineData = {
            labels: month_labels,
            datasets: [
                {
                    label: "Reports",
                    backgroundColor: 'rgba(26,179,148,0.5)',
                    borderColor: "rgba(26,179,148,0.7)",
                    pointBackgroundColor: "rgba(26,179,148,1)",
                    pointBorderColor: "#fff",
                    data: @Html.Raw(reports_data)
                }
            ]
        };

        var report_lineOptions = {
            responsive: true
        };


        var ctx = document.getElementById("report-lineChart").getContext("2d");
        new Chart(ctx, { type: 'line', data: report_lineData, options: report_lineOptions });


        var medReq_doughnutData = {
            labels: @Html.Raw(medReq_labels),
            datasets: [{
                data: @Html.Raw(medReq_data),
                backgroundColor: @Html.Raw(medReq_colors)
            }]
        };

        var doughnutOptions = {
            responsive: true
        };


        var ctx2 = document.getElementById("medReq-pieChart").getContext("2d");
        new Chart(ctx2, { type: 'doughnut', data: medReq_doughnutData, options: doughnutOptions });




        // Assuming Model.PatientBirthDays is a JSON array of date strings
        const birthdays = @Html.Raw(Json.Serialize(Model.PatientBirthDays));
        console.log(birthdays);

        const currentYear = new Date().getFullYear();
        const ages = birthdays.map(birthday => currentYear - new Date(birthday).getFullYear());

        const bins = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
        const ageDistribution = bins.map((bin, index) => {
            if (index === bins.length - 1) return 0;
            return ages.filter(age => age >= bin && age < bins[index + 1]).length;
        });

        const ctx3 = document.getElementById('age-binChart').getContext('2d');
        const ageDistributionChart = new Chart(ctx3, {
            type: 'bar',
            data: {
                labels: bins.slice(0, -1).map((bin, index) => `${bin}-${bins[index + 1]}`),
                datasets: [{
                    label: 'Number of Patients',
                    data: ageDistribution,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });


        var gender_doughnutData = {
            labels: ["Male", "Female"],
            datasets: [{
                data: [@Model.PatientGenderCnt.First, @Model.PatientGenderCnt.Second],
                backgroundColor: ["#dedede", "#b5b8cf"]
            }]
        };

        var ctx4 = document.getElementById("gender-pieChart").getContext("2d");
        new Chart(ctx4, { type: 'doughnut', data: gender_doughnutData, options: doughnutOptions });



        const ctx5 = document.getElementById('treatment-barChart').getContext('2d');

        const treatmentDistributionChart = new Chart(ctx5, {
            type: 'bar',
            data: {
                labels: ["HD", "HDF", "HD && HDF"],
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.UnitsTreatmentTypeCnt)),
                    label: '# Dialysis Units',
                    backgroundColor: 'rgba(26,179,148,0.5)',
                    borderColor: "rgba(26,179,148,0.7)",
                    pointBackgroundColor: "rgba(26,179,148,1)",
                    pointBorderColor: "#fff",
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true, // Ensure y-axis starts at zero
                        title: {
                            display: true,
                            text: '# Dialysis Units'
                        }
                    }
                }
            }
        });













        var mapData = {
            "US": 498,
            "SA": 200,
            "CA": 1300,
            "DE": 220,
            "FR": 540,
            "CN": 120,
            "AU": 760,
            "BR": 550,
            "IN": 200,
            "GB": 120,
            "RU": 2000
        };

        // Define a default scale (you can adjust this value as needed)
        var defaultScale = 1;

        // Initialize vector map with default scale
        $('#world-map').vectorMap({
            map: 'world_mill_en',
            backgroundColor: "transparent",
            regionStyle: {
                initial: {
                    fill: '#e4e4e4',
                    "fill-opacity": 1,
                    stroke: 'none',
                    "stroke-width": 0,
                    "stroke-opacity": 0
                }
            },
            series: {
                regions: [{
                    values: mapData,
                    scale: ["#1ab394", "#22d6b1"],
                    normalizeFunction: 'polynomial'
                }]
            }
        });

        // After initialization, check if scale is zero or undefined and set default if necessary
        var mapObject = $('#world-map').vectorMap('get', 'mapObject');
        if (mapObject && (mapObject.scale === 0 || isNaN(mapObject.scale))) {
            mapObject.setScale(defaultScale);
        }




        /*
        const sessionData = [
            { day: 'Monday', time: '06:35', count: 5 },
            { day: 'Monday', time: '18:45', count: 3 },
            // Add more session data here
        ];

        const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
        const times = Array.from({ length: 24 }, (_, i) => `${String(i).padStart(2, '0')}:00`);

        const normalizeTime = (time) => {
            const [hour, minute] = time.split(':').map(Number);
            return `${String(hour).padStart(2, '0')}:00`;
        };

        const normalizedSessionData = sessionData.map(session => ({
            day: session.day,
            time: normalizeTime(session.time),
            count: session.count
        }));


        const ctx = document.getElementById('sessionHeatmap').getContext('2d');

        const data = {
            labels: {
                x: times,
                y: days
            },
            datasets: [{
                label: 'Session Frequency',
                data: normalizedSessionData.map(session => ({
                    x: session.time,
                    y: session.day,
                    v: session.count
                })),
                backgroundColor: context => {
                    const value = context.dataset.data[context.dataIndex].v;
                    const alpha = value / 10; // Adjust alpha based on value
                    return `rgba(0, 123, 255, ${alpha})`;
                },
                borderWidth: 1,
                borderColor: 'rgba(0, 123, 255, 1)'
            }]
        };

        const config = {
            type: 'matrix',
            data: data,
            options: {
                scales: {
                    x: {
                        type: 'category',
                        labels: times,
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    },
                    y: {
                        type: 'category',
                        labels: days,
                        title: {
                            display: true,
                            text: 'Day'
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            title: context => `${context[0].raw.y} at ${context[0].raw.x}`,
                            label: context => `Sessions: ${context.raw.v}`
                        }
                    }
                }
            }
        };

        const sessionHeatmap = new Chart(ctx, config);
        */






    });
</script>