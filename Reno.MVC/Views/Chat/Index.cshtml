@model ChatModel

@using Reno.MVC.Models.Chat;
@using Reno.MVC.Services.Base.Contracts;
@inject ILocalStorageService _localStorageService;

@{
    string access_token = _localStorageService.GetCurrentToken();
    string user_id = User.Claims.Where(c => c.Type == "sub").FirstOrDefault()?.Value ?? "";

    ViewBag.Title = "Chat";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css">

@section styles{
    <style>
        .label {
            padding: 4px 4px;
        }

        .form-horizontal .control-label {
            text-align: left;
        }

        .nav-tabs > li > a {
            padding: 10px 15px 10px 6px;
        }

        .group-start {
            height: 40px;
            background-color: #E2e2e2;
        }

        tr {
            line-height: 3;
        }

        .titleNav {
            text-align: center;
            /*margin: -20px -15px 0px 10px;*/
        }

        .example123 td {
            text-align: left;
        }

        .well {
            background-color: rgba(0, 0, 0, 0) !important;
        }

        .chat-message.right {
            width: fit-content;
            margin-left: auto;
        }

        .chat-message.right .message {
            color: #3f3d3d;
            background-color: #1ab394b3;
            border-radius: 10px 0 10px 10px;
            margin-right: 0 !important;
        }

        .chat-message.right .message-date {
            color: #4c4c4c;
            display: block;
            text-align: left;
            float: none !important;
        }

        .chat-message.left {
            width: fit-content;
            margin-right: auto;
        }

        .chat-message.left .message {
            border-radius: 0 10px 10px 10px;
        }

        .chat-user {
            background-color: #fff;
            cursor: pointer;
        }

        .chat-user:hover, li.chat-user.active {
            background-color: #edeaea;
        }

        .showtt {
            bottom: -2px !important;
        }

        .hidett {
            bottom: -100px !important;
        }

        #toDown {
            position: absolute;
            right: 22px;
            z-index: 1000;
            bottom: -100px;
            width: 40px;
            height: 40px;
            color: rgb(255, 255, 255);
            cursor: pointer;
            background: #1ab394;
            border-radius: 3px;
            transition: all 0.4s ease 0s;
        }

        #toDown i {
            display: block;
            font-size: 16px;
            padding: 10px 12px 0px 0px;
        }

        .chat-user-msg-wrapper {
            display: flex;
            justify-content: space-between;
        }

        .chat-user-msg {
            font-weight: 500;
            font-size: 0.8em;
            flex-grow: 1;
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }

        .msg-count {
            font-size: 0.75em;
            align-items: center;
            justify-content: center;
            display: flex;
            height: 20px;
            width: 20px;
            color: #fff;
            background-color: #1ab394;
            border-radius: 50%;
            flex-shrink: 0;
        }

        .users-list .chat-avatar {
            width: 40px;
            height: 40px;
        }

        .message-status {
            display: flex;
            align-items: center;
        }

        .bi-check-all.read {
            color: #3232d4;
        }

        .last-msg-date {
            float: right;
            font-weight: 500;
            font-size: 0.8em;
        }

        .chat-discussion {
            overflow-wrap: anywhere;
            height: 650px;
            position: relative;
        }

        .msg-input {
            padding-right: 45px;
            position: relative;
            height: 34px !important;
        }

        #upload-btn {
            border-radius: 50%;
            bottom: 8px;
            right: 30px;
            position: absolute;
            border: none;
            background-color: #cbcbcb2b;
        }

        #upload-btn:hover {
            background-color: #cbcbcbb8;
        }

    </style>
}


<!-- Begin wrapper Content (Page Content) -->
<div class="wrapper wrapper-content animated fadeInRight shadow" style="padding-top:25px;">
    <!-- Begin Row-->
    <div class="row mx-0">
        <!-- Begin Column-->
        <div class="col-md-12 col-xs-12">

            <div class="ibox float-e-margins chat-view">
                <div class="ibox-title shadow" style="background-color:#f7f6f6;min-height:55px;">
                    <input hidden id="page-index" value="1" />

                    <img class="chat-avatar rounded-circle" src="imgs/chat_avatar.jpg"
                         alt="" style="border-radius: 50%;">
                    <div class="chat-user-name" style="padding: 5px;">
                        <a href="#" style="font-size: larger;" id="active-name"></a>
                    </div>

                </div>

                <div class="ibox-content" style="border:none;">

                    <div class="row" style="margin:0px;">

                        <div class="ibox col-md-9" style="height:700px">
                            <div class="ibox-content chat-discussion" >
                                @foreach (var message in Model.Messages)
                                {
                                    if (message.SenderId == user_id)
                                    {
                                        var status = message.Status == 1 ? "check" : "check-all";
                                        status = message.Status == 2 ? status : status + " read";

                                        <div class="chat-message right" data-id="@message.Id">
                                            <div class="message">
                                                <div class="message-status">
                                                    <i class="bi bi-@status" style="font-size:1.1em;"></i>
                                                    <span class="message-date">
                                                        @message.SendingTime.ToString("ddd MMM dd yyyy - hh:mm tt")
                                                    </span>
                                                </div>
                                                <span class="message-content" style="text-align:left;">@message.Message</span>
                                            </div>
                                        </div>
                                    }
                                    else if (message.SenderId == Model.ActiveContact.UserId)
                                    {
                                        <div class="chat-message left" data-id="@message.Id">
                                            <img class="message-avatar" src="imgs/chat_avatar.jpg" alt="">
                                            <div class="message">
                                                <a class="message-author" href="#"> Michael Smith </a>
                                                <span class="message-date">
                                                    @message.SendingTime.ToString("ddd MMM dd yyyy - hh:mm tt")
                                                </span>
                                                <span class="message-content" style="text-align:left;">@message.Message</span>
                                            </div>
                                        </div>
                                    }
                                }

                                @*
                                <div id="toDown"><i class="fa fa-chevron-down"></i></div>
                                *@
                            </div>

                            <div class="ibox-footer shadow chat-message-form" style="height: 50px;">
                                <div class="row" style="display:flex;">
                                    
                                        <div class="col-md-11" style="padding-right: 10px;width: 95%;">
                                            <div class="form-group">
                                                
                                                <textarea class="form-control msg-input"
                                                    placeholder="Type a message" id="msg"></textarea>
                                                 
                                                    <input name="file" type="file" id="file-input" style="display:none;"/>
                                                    <input hidden id="active-chat" name="receiverId" value="" />
                                                    <button id="upload-btn" type="button"><i class="fa fa-paperclip"></i></button>

                                            </div>
                                        </div>
                                        <div class="col-md-1" style="width: 50px;padding: 0;">
                                            <button class="btn btn-primary" id="send" onclick="sendMessage()" >
                                                <i class="fa fa-send"></i>
                                            </button>
                                        </div>
                                    
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3" style="padding-right:0;">
                            <div class="chat-users shadow" style="height:700px;margin-left:-10px;">

                                <div class="users-list nav" id="users-list" >
                                    @foreach (var contact in Model.Contacts)
                                    {
                                        var last_date = "";

                                        <li class="chat-user"
                                            data-user-id="@contact.UserId" onclick="changeActiveChat(this)">
                                            <img class="chat-avatar" src="imgs/chat_avatar.jpg" alt="">
                                            <div class="chat-user-info" style="width: 100%;">
                                                <div class="chat-user-name" style="padding: 0;">
                                                    @contact.Name
                                                    @if (contact.LastMsg != null) {
                                                        @if (DateTime.Now.Date == contact.LastMsg.SendingTime.Date)
                                                            last_date = contact.LastMsg.SendingTime.ToString("hh:mm tt");
                                                        else
                                                            last_date = contact.LastMsg.SendingTime.ToString("dd-MMM-yyyy");
                                                    }
                                                    <span class="last-msg-date">@last_date</span>
                                                </div>
                                                @if (contact.LastMsg != null)
                                                {
                                                    <div class="chat-user-msg-wrapper">
                                                        <div class="chat-user-msg">
                                                            @contact.LastMsg.Message
                                                        </div>
                                                        @if (contact.UnreadMsgCount > 0)
                                                        {
                                                            <span class="msg-count">@contact.UnreadMsgCount</span>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </li>
                                    }
                                </div>

                            </div>
                        </div>

                    </div>

                </div>
                
            </div>
            <!-- End Column-->
        </div>
        <!-- End Row-->
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.9/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

	<script>
        $('#upload-btn').click(function () {
            console.log("hbhbh");
            $('#file-input').click();
        });

        $('#file-input').change(function () {
            if (this.files && this.files[0] && $('#active-chat').val()) {
                var formData = new FormData();
                
                formData.append('file', this.files[0]);
                formData.append('receiverId', $('#active-chat').val())

                $.ajax({
                    url: 'https://renocareapi.azurewebsites.net/chat/upload',
                    type: 'POST',
                    headers: {
                        "Authorization": `Bearer @access_token`
                    },
                    data: formData,
                    contentType: false, // Important for file uploads
                    processData: false, // Important for file uploads
                    success: function (response) {
                        // Handle success
                        console.log('File uploaded successfully');
                    },
                    error: function (response) {
                        // Handle error
                        console.log('Error uploading file');
                    }
                });

                $(this).val('');
            }
        });

        // Function to scroll chat discussion to the bottom
        function scrollChatDown() {
            $('.chat-discussion').animate({
                scrollTop: $('.chat-discussion')[0].scrollHeight
            }, 1000);
        }

        // Initial scroll to the bottom on load
        scrollChatDown();

        // Variable to track pagination
        var hasNextPage = true;

        // Function to handle changing active chat
        function changeActiveChat(elem) {
            if ($(elem).hasClass('active')) {
                return;
            }

            // Set new contact as active
            let userId = $(elem).data("user-id");
            $('li.chat-user.active').removeClass('active');
            $(elem).addClass('active');

            // Update active chat title and other UI elements
            $('#active-chat').val(userId);
            $('#page-index').val(0);
            var userName = $(elem).find('.chat-user-name').contents().filter(function () {
                return this.nodeType == 3;
            }).text().trim();
            $('#active-name').html(userName); // Changed innerHtml to html and this to elem

            // Change font weight if .chat-user-msg is found
            $(elem).find('.chat-user-msg').css('font-weight', '500'); // Corrected method to change font weight

            // Remove msg-count
            $(elem).find('.msg-count').remove(); // Corrected method to remove element

            // Get new active chat messages
            hasNextPage = true;
            $('.chat-discussion').empty();
            getPrevMsgs();
            setTimeout(() => {
                scrollChatDown();
            }, 100);
        }

        // SignalR connection setup
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("https://renocareapi.azurewebsites.net/chat", {
                accessTokenFactory: () => '@access_token'
            })
            .build();

        connection.start().catch(err => console.error(err));

        // Event listener for marking message as read
        connection.on("MarkedAsRead", (msg_id) => {
            var $markedMsg = $('.chat-message[data-id="' + msg_id + '"]');
            var $icon = $markedMsg.find('i');

            // Check if it has class 'bi-check', remove it, then add class 'bi-check-all'
            if ($icon.hasClass('bi-check')) {
                $icon.removeClass('bi-check').addClass('bi-check-all read');
            }

            // Make a transition on the icon color to red
            $icon.css('transition', 'color 0.5s').css('color', '#3232d4');
        });

        // Event listener for marking message as received
        connection.on("MarkedAsReceived", (msg) => {
            var $markedMsg = $('.chat-message[data-id="' + msg.id + '"]');
            var $icon = $markedMsg.find('i');

            // Check if it has class 'bi-check', remove it, then add class 'bi-check-all'
            if ($icon.hasClass('bi-check')) {
                $icon.removeClass('bi-check').addClass('bi-check-all');
            }
        });


        // Scroll event listener for loading previous messages
        $('.chat-discussion').on('scroll', function () {
            if ($(this).scrollTop() === 0) {
                getPrevMsgs();
            }
        });

        // Function to fetch previous messages
        function getPrevMsgs() {
            if (!hasNextPage) {
                return;
            }

            var active_chat = $('#active-chat').val();
            var page_index = $('#page-index').val();
            page_index++;

            var $chatDiscussion = $('.chat-discussion');
            $.ajax({
                url: `https://renocareapi.azurewebsites.net/chat/messages/${active_chat}?page=${page_index}&pageSize=20`,
                method: "GET",
                headers: {
                    "Authorization": `Bearer @access_token`
                },
                success: function (response) {
                    console.log(response);
                    if (!response.error) {
                        hasNextPage = response.hasNextPage;

                        if (response.items.length > 0) {
                            $('#page-index').val(page_index);
                        }

                        response.items.forEach(function (msg) {
                            let dates = formatMsgDate(msg.SendingTime);

                            let msg_html = displayMsg(msg, dates.formatted_date, dates.last_date);

                            if (msg_html != "new" && msg_html != "error") 
                                $chatDiscussion.prepend(msg_html);
                        });

                    } else {
                        console.log('Error:', response.msg);
                    }
                },
                error: function (xhr, status, error) {
                    console.log('An error occurred:', error);
                }
            });
        }

        // Function to send a message
        function sendMessage() {
            var msg = $('#msg').val();
            var active_chat = $('#active-chat').val();
            if (msg && active_chat) {
                connection.invoke("SendMessage", active_chat, msg).catch(err => console.error(err));
                $('#msg').val("");
            }
        }

        // Receive message event handler
        connection.on("ReceiveMessage", (msg) => {
            let $chatDiscussion = $('.chat-discussion');

            let dates = formatMsgDate(msg.SendingTime);

            let msg_html = displayMsg(msg, dates.formatted_date, dates.last_date);

            if (msg_html != "new" && msg_html != "error") {
                updateToLastMsg(msg, dates.last_date);
                $chatDiscussion.append(msg_html);

                if (msg.senderId == active_chat && msg.receiverId == '@user_id')
                    connection.invoke("MarkRead", msg.id).catch(err => console.error(err));
            }
            else if (msg_html == "new") {
                connection.invoke("MarkReceived", msg.id).catch(err => console.error(err));
            }

            // Scroll to the bottom of the chat discussion
            scrollChatDown();
        });

        // Function to format msg dates
        function formatMsgDate(msg_date) {
            let date = moment(msg_date);
            let formatted_date = date.format('ddd MMM DD YYYY - hh:mm A');
            let last_date;
            if (moment().format('YYYY-MM-DD') === date.format('YYYY-MM-DD')) {
                last_date = date.format('hh:mm A');
            } else {
                last_date = date.format('DD-MMM-YYYY');
            }
            return { formatted_date, last_date };
        }

        
        // Function to get msg status
        function getMsgStatus(status) {
            if (status == 2) return "check-all"
            else if (status == 3) return "check-all read";
            return "check";
        }

        // Function to update to the last user msg
        function updateToLastMsg(msg, last_date) {
            let $chatUser = $('li.chat-user[data-user-id="' + msg.receiverId + '"]');
            $chatUser.find('.chat-user-msg').html(msg.message);
            $chatUser.find('.last-msg-date').html(last_date);
        }

        // Function to return how the msg part will be displayed based on is file or not
        function getMsgHtmlFormat(msg) {
            if (msg.isFile) {
                return `<a target="_blank" href="${msg.fileLink}" class="message-content" style="text-align:left;">${msg.message}</a>`;
            }
            else {
                return `<span class="message-content" style="text-align:left;">${msg.message}</span>`;
            }
        }

        // Function to add new contact with last message
        function addNewContact(msg, last_date) {
            var $chatUser = $('li.chat-user[data-user-id="' + msg.senderId + '"]');

            if ($chatUser.length > 0) {
                // Update the message and change font weight
                $chatUser.find('.chat-user-msg').html(msg.message).css('font-weight', '700');
                $chatUser.find('.last-msg-date').html(last_date);

                // Update the message count
                var $msgCount = $chatUser.find('.msg-count');
                if ($msgCount.length > 0) {
                    var currentCount = parseInt($msgCount.html());
                    $msgCount.html(currentCount + 1);
                } else {
                    // Append msg-count span if it doesn't exist
                    $chatUser.find('.chat-user-msg-wrapper').append('<span class="msg-count">1</span>');
                }

            } else {
                $('#users-list').prepend(
                    `<li class="chat-user" onclick="changeActiveChat(this)" data-user-id="${msg.senderId}">
                        <img class="chat-avatar" src="imgs/chat_avatar.jpg" alt="">
                        <div class="chat-user-info" style="width: 100%;">
                            <div class="chat-user-name" style="padding: 0;">
                                Michael Smith
                                <span class="last-msg-date">${last_date}</span>
                            </div>
                            <div class="chat-user-msg-wrapper">
                                <div class="chat-user-msg" style="font-weight:700;">
                                    ${msg.message}
                                </div>
                                <span class="msg-count">1</span>
                            </div>
                        </div>
                    </li>`
                );
            }
        }

        // Function to get how msg will be displayed 
        function displayMsg(msg, formatted_date, last_date) {
            let msg_part_display = getMsgHtmlFormat(msg);
            
            let active_chat = $('#active-chat').val();

            if (msg.senderId == '@user_id' && msg.receiverId == active_chat) {
                let status = getMsgStatus(msg.status);

                return `<div class="chat-message right" data-id="${msg.id}">
                            <div class="message">
                                <div class="message-status">
                                    <i class="bi bi-${status}" style="font-size:1.1em;"></i>
                                    <span class="message-date">${formatted_date}</span>
                                </div>
                                ${msg_part_display}
                            </div>
                        </div>`;

            } else if (msg.senderId == active_chat && msg.receiverId == '@user_id') {
                return `<div class="chat-message left" data-id="${msg.id}">
                            <img class="message-avatar" src="imgs/chat_avatar.jpg" alt="">
                            <div class="message">
                                <a class="message-author" href="#">Michael Smith</a>
                                <span class="message-date">${formatted_date}</span>
                                ${msg_part_display}
                            </div>
                        </div>`;

            } 
            else if (msg.senderId != active_chat) {
                addNewContact(msg, last_date);
                return "new";
            }
            
            return "error";
        }
    </script>
}
