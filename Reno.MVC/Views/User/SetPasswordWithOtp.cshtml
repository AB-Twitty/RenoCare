@model Reno.MVC.Models.User.Auth.PasswordResetModel

@{
    Layout = null;
    ViewBag.Title = "Password - Reset";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="DANIELS">
    <title>RenoCare | @ViewBag.Title</title>
    <link rel="shortcut icon" href="~/imgs/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="">
    <link rel="stylesheet" href="~/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/Login.css">
    <style>
        #code {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .numberCircle {
            width: 45px; /* Set the desired width */
            height: 45px; /* Set the desired height */
            border: 2px solid #18a68952; /* Solid border color */
            border-radius: 50%; /* Rounded corners for a circle */
            text-align: center; /* Center the number */
            font-size: 30px; /* Set the font size */
            margin-right: 10px; /* Add spacing between circles */
            display: inline-block; /* Display circles horizontally */
            background-color: #ffffff8a;
        }

        input:focus {
            outline: none;
        }
    </style>
</head>
<body class="overflow-hidden">
    <section class="gray-bg login-page">
        <div class="row h-100">
            <div class="col-lg-6 col-md-12 col-sm-12 mx-auto d-flex justify-content-center align-items-center">
                <div class=" loginscreen w-100 py-5 px-5">
                    <h2 class="text-center w-100">Reno<span>Care</span></h2>

                    <form id="otp-form" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <div class="form-group">
                            <label class="login-lable p-0 pb-1" asp-for="Email"></label>
                            <input class="form-control" type="text" id="email" placeholder="Enter Your Email" asp-for="Email">
                            <span class="text-danger" asp-validation-for="Email"></span>
                        </div>
                        <div class="form-group">
                            <label class="login-lable p-0 pb-1" asp-for="Password"></label>
                            <input class="form-control" type="password" placeholder="Enter Your Password" asp-for="Password">
                            @if (ViewData.ModelState["Password"]?.Errors.Any() ?? false)
                            {
                                <ul>
                                    @foreach (var error in ViewData.ModelState["Password"]?.Errors)
                                    {
                                        <li class="text-danger">@error.ErrorMessage</li>
                                    }
                                </ul>
                            }
                        </div>
                        <div class="form-group">
                            <label class="login-lable p-0 pb-1" asp-for="ConfirmPassword"></label>
                            <input class="form-control" type="password" placeholder="Confirm Your Password" asp-for="ConfirmPassword">
                            <span class="text-danger" asp-validation-for="ConfirmPassword"></span>
                        </div>
                        <div class="form-group">
                            <div id="code">
                                @for(int i=1; i<=6; i++)
                                {
                                    <input class="numberCircle otp-input" maxlength="1" onkeydown="restrictOTP(event,this)" value="-" />
                                }
                            </div>
                            <input id="otp" asp-for="Otp" hidden />
                        </div>
                        
                        <div class="form-group row">
                            <div class="col-md-6 mx-auto">
                                <button type="button" id="btn-otp" class="btn btn-primary btn-block ">Next</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

        </div>
    </section>


    <script>
        function restrictOTP(event, element) {
            if (restrictToOTP(event)) {
                // Set a timeout to delay the focus to the next input
                setTimeout(() => {
                    const nextInput = event.target.nextElementSibling;
                    if (nextInput && nextInput.tagName === 'INPUT') {
                        nextInput.value = '';
                        nextInput.focus(); // Focus on the next input
                    }
                }, 5); // The delay can be very short, just enough to allow the value to be set
            }
        }

        function restrictToOTP(event) {
            const key = event.keyCode || event.which;
            // Allow numeric keys (0-9) and numeric keypad keys (NumLock section)
            if ((key >= 48 && key <= 57) || (key >= 96 && key <= 105) || key === 8 || key === 9) {
                if (key===8 || key===9) return false;
                event.target.style.borderColor = '#18a68952';
                return true;
            } else {
                event.preventDefault(); // Prevent non-numeric characters
                return false;
            }
        }

        document.getElementById('btn-otp').addEventListener('click', function () {
            var otp = "";
            var valid_otp = true;
            var inputs = document.querySelectorAll('#code input');

            // Iterate over each input to build the OTP and check validity
            inputs.forEach(function (input) {
                if (input.value == '' || input.value == '-') {
                    valid_otp = false;
                    input.style.borderColor = 'red'; // Set border color to red if input is empty
                }
                otp += input.value;
            });

            // If the OTP is valid, set the password and submit the form
            if (valid_otp) {
                var otp_model = document.getElementById('otp');
                otp_model.value = otp;
                // Submit the form
                document.getElementById('otp-form').submit();
            }
        });

    </script>

    <script src="~/lib/jquery/dist/jquery.js"></script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
</body>
</html>